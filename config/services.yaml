# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    Directorio_proyecto: '%kernel.project_dir%/public'
    upload_directory: '%kernel.project_dir%/public/images'
    Directorio_Enlaces: '%kernel.project_dir%/public/enlaces'
    
    Directorio_Reportes: '%kernel.project_dir%/public/reportes'
    Directorio_LogoRep: '%kernel.project_dir%/public/resources/images/image_rep.png'
    Directorio_Galeria: '%kernel.project_dir%/public'
    Directorio_Correlativo: '%kernel.project_dir%/public/correlativo'   
    Directorio_OrganigramaGerencia: '%kernel.project_dir%/public/organigramagerencia'
    Directorio_DocExtra: '%kernel.project_dir%/public/repositorio/documentoextra'   
    Directorio_DocProceso: '%kernel.project_dir%/public/repositorio/documentoproceso'   
    Directorio_DocFormulario: '%kernel.project_dir%/public/repositorio/documentoformulario'      
    Directorio_Documento: '%kernel.project_dir%/public/repositorio/documento'     
    Directorio_DocBaja: '%kernel.project_dir%/public/repositorio/documentobaja'
    Directorio_FichaCargo: '%kernel.project_dir%/public/repositorio/fichacargo'
    Directorio_SIG: '%kernel.project_dir%/public/sig'  

services:

                    
 
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    app.command.load_info:
        class: App\Command\LoadInfoCommand
        tags:
           - { name: console.command }